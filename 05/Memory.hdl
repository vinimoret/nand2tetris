// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    Not(in=address[14], out=isRAM);

    // Screen
    Not(in=address[13], out=not13);
    And(a=address[14], b=not13, out=isScreen);

    // KBD
    And(a=address[14], b=address[13], out=isKbd);

    And(a=address[14], b=address[13], out=highBitsMatch);


    Or(a=address[0], b=address[1], out=or1);
    Or(a=address[2], b=address[3], out=or2);
    Or(a=address[4], b=address[5], out=or3);
    Or(a=address[6], b=address[7], out=or4);
    Or(a=address[8], b=address[9], out=or5);
    Or(a=address[10], b=address[11], out=or6);
    Or(a=address[12], b=or1, out=or7);


    Or(a=or2, b=or3, out=or8);
    Or(a=or4, b=or5, out=or9);
    Or(a=or6, b=or7, out=or10);

    Or(a=or8, b=or9, out=or11);
    Or(a=or10, b=or11, out=lowBitsAnySet);

    Not(in=lowBitsAnySet, out=lowBitsZero);


    And(a=highBitsMatch, b=lowBitsZero, out=isKeyboard);


    And(a=load, b=isRAM, out=ramLoad);
    And(a=load, b=isScreen, out=screenLoad);

    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);


    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    Keyboard(out=keyboardOut);

    Mux4Way16(a=ramOut, b=screenOut, c=keyboardOut,
              sel[0]=isScreen, sel[1]=isKeyboard,
              out=out);
}