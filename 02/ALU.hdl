// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        And16(a= , b= , out= );
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Zero everything out and does nothing
    And16(a= x , b= false , out= zeroX );
    And16(a= y , b= false , out= zeroY );
    // check the zero bit and out put to zeroOut variable  
    Mux16(a= x , b= zeroX, sel= zx , out=zeroXout );
    Mux16(a= y , b=  zeroY, sel= zy , out=zeroYout );
    //negate and does nothing
    Not16(in= zeroXout , out=  notXOut);
    Not16(in= zeroYout , out=  notYOut);
    

    Mux16(a= zeroXout , b= notXOut  , sel= nx , out=notX );
    Mux16(a= zeroYout , b= notYOut , sel= ny , out=notY );

    Mux16(a=x , b=zeroXout , sel= zx, out=zxOut );
    Mux16(a=zxOut , b=notX , sel= nx, out=xOut );
    
    Mux16(a=y , b=zeroYout , sel= zy, out=zyOut );
    Mux16(a=zyOut , b=notY , sel= ny, out=yOut );

    Add16(a =xOut , b =yOut , out = outSum );
    And16(a=xOut , b=yOut , out= outAnd );

    Mux16(a=outAnd , b=outSum , sel= f, out=resultF );

    Not16(in=resultF , out= notResultF );

    Mux16(a=resultF , b=notResultF , sel=no , out=out, out[15]=msb, out[0]=a,
    out[1]=b,out[2]=c,out[3]=d,out[4]=e,out[5]=g,out[6]=h,out[7]=i,out[8]=j
    ,out[9]=k,out[10]=l,out[11]=m,out[12]=n,out[13]=o,out[14]=p);

    And(a=msb , b=true , out=ng );

    Or(a=a , b=b , out=or0 );
    Or(a=or0 , b=c , out=or1 );
    Or(a=or1 , b=d , out=or2 );
    Or(a=or2 , b=e , out=or3 );
    Or(a=or3 , b=g , out=or4 );
    Or(a=or4 , b=h , out=or5 );
    Or(a=or5 , b=i , out=or6 );
    Or(a=or6 , b=j , out=or7 );
    Or(a=or7 , b=k , out=or8 );
    Or(a=or8 , b=l , out=or9 );
    Or(a=or9 , b=m , out=or10 );
    Or(a=or10 , b=n , out=or11 );
    Or(a=or11 , b=o , out=or12 );
    Or(a=or12 , b=p , out=or13 );
    Not(in=or13 , out=zr );

    


    
    

    




   
}